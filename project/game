import sys
import pygame
import math
import random
from pygame.locals import QUIT
from math import sin, cos

pygame.init()

'''
class Pointer():
    def __init__(self, WINDOW_WIDTH, WINDOW_HEIGHT, fi) -> None:
        self.image = pygame.image.load(fi)
        self.size = self.image.get_size()
        self.pos = (WINDOW_WIDTH/2-self.size[0]/2, WINDOW_HEIGHT-self.size[1])
    
    def blit(self):
        #self.image.fill(TRANSPARENT)
        window_surface.blit(self.image, self.pos)
        pygame.display.update()
        return

    def rot_center(self, angle):
        """rotate an image while keeping its center and size"""
        orig_rect = self.image.get_rect()
        rot_image = pygame.transform.rotozoom(self.image, angle, 1)
        rot_rect = orig_rect.copy()
        rot_rect.center = rot_image.get_rect().center
        rot_image = rot_image.subsurface(rot_rect).copy()
        return rot_image
'''

# TESTING USE
class Block(pygame.sprite.Sprite):
    def __init__(self, pos, group):
        super().__init__(group)
        self.image = pygame.Surface((50,50))
        self.image.fill((0,255,0))
        self.rect = self.image.get_rect(topleft = pos)

class Barriers(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, score):
        super().__init__()
        self.x = x
        self.y = y
        self.width = 500 / 10  # Set maximum width of block = 1/10 of the window width
        self.height = self.width
        self.score = score

    def render(self, window_surface):
        color = Barriers.color_pick(self)
        pygame.draw.rect(window_surface, color, (self.x, self.y, self.width, self.height), 0)
        self.rect = self.image.get_rect(topleft = pos)
    
    def color_pick(self):
        color = (255, 255, 255)
        if (self.score < 10): # 1-10: Red
            color = (255, 0, 0)
        elif (self.score < 20): # 11-20: Orange
            color = (255, 128, 0)
        elif (self.score < 30): # 21-30: Yellow
            color = (255, 255, 0)
        elif (self.score < 40): # 31-40: Green
            color = (0, 255, 0)
        elif (self.score < 50): # 41-50: Cyan
            color = (0, 255, 255)
        elif (self.score < 60): #51-60: Blue
            color = (0, 0, 255)
        elif (self.score < 70): #61-70: Purple
            color = (255, 0, 255)
        else:
            color = (0, 0, 0) # Otherwise: Black
        return color
    
    def score_changer(self, change):
        self.score += change
    
    def score_setter(self, set_score):
        self.score = set_score


class Balls(pygame.sprite.Sprite):
    def __init__(self, radius, pos_x, pos_y, group, blk_and_ball_group, upgrade_group) -> None:
        super().__init__(group)
        self.image = pygame.Surface([radius*2,radius*2])
        self.image.fill((0,0,0))
        self.rect = self.image.get_rect()
        self.rect.center = (pos_x, pos_y)
        self.is_move = False
        self.x_speed = 0
        self.y_speed = 0
        self.radius = radius
        self.pause = 0
        self.block = blk_and_ball_group
        self.upgrade = upgrade_group

    def collison(self):
        #collison with other rect
        overlap_sprites = pygame.sprite.spritecollide(self, self.block, False)
        for i in pygame.sprite.spritecollide(self, self.upgrade, True):
            overlap_sprites.append(i)

        collision_tolerace = 10
        if overlap_sprites:
            for sprite in overlap_sprites:
                if abs(sprite.rect.top - self.rect.bottom) < collision_tolerace and self.y_speed < 0:
                    self.y_speed *= -1
                if abs(sprite.rect.bottom - self.rect.top) < collision_tolerace and self.y_speed > 0:
                    self.y_speed *= -1
                if abs(sprite.rect.left - self.rect.right) < collision_tolerace and self.x_speed > 0:
                    self.x_speed *= -1
                if abs(sprite.rect.right - self.rect.left) < collision_tolerace and self.x_speed < 0:
                    self.x_speed *= -1
                
        
    def update(self):
        if self.is_move == True:
            if self.pause == 0:
                pos_x = self.rect.center[0]
                pos_y = self.rect.center[1]
                pos_x += 10 * self.x_speed
                pos_y -= 10 * self.y_speed
                self.rect.center = (round(pos_x), round(pos_y))

                #change moving dir with hit the border
                if (self.rect.center[0] <= self.radius and self.x_speed <= 0)or (self.rect.center[0] >= WINDOW_WIDTH-self.radius and self.x_speed >= 0):
                    self.x_speed *= -1
                if self.rect.center[1] <= self.radius and self.y_speed >= 0 :
                    self.y_speed *= -1
                #end the move when move to the bootom of the screen
                if self.rect.center[1] >= WINDOW_HEIGHT+25:
                    ball.rect.center = (WINDOW_WIDTH/2, WINDOW_HEIGHT-26)
                    self.is_move = False
            else:
                self.pause -= 1
        self.collison()

class Upgrade(pygame.sprite.Sprite):
    def __init__(self, pos, upgrade_type, groups) -> None:
        super().__init__(groups)
        self.upgrade_type = upgrade_type
        self.image = pygame.Surface((50,50))
        self.rect = self.image.get_rect(midtop = pos)




# Define an array which store the block location and block weighting
blk_weight = [
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0]
]

# Generate Blocks on screen
def generate_blocks(window_surface, blk_weight):
    block_generate = []

    for i in range(len(blk_weight)):
        for j in range(len(blk_weight[i])):
            if (blk_weight[i][j] >= 1):
                block_generate.append(Barriers(j * 50, i * 50, 50, 50, blk_weight[i][j]))
    
    for blocks in block_generate:
        Barriers.render(blocks, window_surface)

# Move blocks downward after each round ends
def round_update(blk_weight):
    for i in range(len(blk_weight)):
        for j in range(len(blk_weight[i])):
            if j == len(blk_weight[i]):
                blk_weight[i][j] = 0
            else:
                blk_weight[i][j] = blk_weight[i][j + 1]

# Random new blocks


WINDOW_WIDTH = 500
WINDOW_HEIGHT = 600
WHITE = (255, 255, 255)
FPS = 30
fi_pointer = "files/pointer.jpg"
degree = 90
radius = 25
clock = pygame.time.Clock()

window_surface = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("GAME")
window_surface.fill(WHITE)


# pointer = Pointer(WINDOW_WIDTH, WINDOW_HEIGHT, fi_pointer)
# pointer.blit()
all_sprites_gruop = pygame.sprite.Group()
ball_group = pygame.sprite.GroupSingle()
block_group = pygame.sprite.Group()
upgrade_group = pygame.sprite.Group()

#ball
ball = Balls(radius, WINDOW_WIDTH/2, WINDOW_HEIGHT-26, [all_sprites_gruop ,ball_group], all_sprites_gruop, upgrade_group)


#block
block = Block((50, 260), [all_sprites_gruop, block_group])

#upgrade
upgrade_type = random.choice(["add_damage", "ball_split"])
upgrade = Upgrade((450,150), upgrade_type, upgrade_group)
# variable for change degree
is_degree_change = False
change_value = 0

#main game loop
while True:
    clock.tick(FPS)
    rad = degree/180 * math.pi

    window_surface.fill(WHITE)

    # Generate Blocks (TEST)
    generate_blocks(window_surface)

    #move the pointer
    if is_degree_change == True:
        degree += change_value
        if degree > 170:
            degree = 170
        if degree < 10:
            degree = 10

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            ''''
            if event.key == ord("a"):
                pointer.image = pointer.rot_center(1)
                pointer.blit()
            if event.key == ord("d"):
                pointer.image = pointer.rot_center(-1)
                pointer.blit()
            '''
            #change the angle 
            if event.key == ord("a"):
                if ball.is_move == False:
                    is_degree_change = True
                    change_value = 1
            if event.key == ord("d"):
                if ball.is_move == False:
                    is_degree_change = True
                    change_value = -1

            #shoot
            if event.key == ord("w"):
                ball.x_speed = cos(rad)
                ball.y_speed = sin(rad)
                ball.is_move = True

        #keyup to stop the pointer 
        if event.type == pygame.KEYUP:
            is_degree_change = False
            change_value = 0

        if event.type == QUIT:
            pygame.quit()
            sys.exit()

    # for balls in ball_group:
    #     balls.check_hit_bound()
    
    all_sprites_gruop.draw(window_surface)
    upgrade_group.draw(window_surface)
#    pygame.draw.rect(window_surface, (255, 0, 0), block)
    ball_group.update()

    pygame.draw.line(window_surface, (255, 0, 0), (WINDOW_WIDTH/2, WINDOW_HEIGHT-25), (WINDOW_WIDTH/2 + 100*cos(rad), (WINDOW_HEIGHT-25)-100*sin(rad)), 3)
    pygame.display.update()